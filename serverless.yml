service: my-serverless-app
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs18.x
  environment:
    MY_USER_POOL_CLIENT_ID: "1tnksmt3v2tmglbddfg1qiqbdd"

functions:
  signUp:
    handler: src/handler.signUp
    events:
      - http:
          method: post
          path: /sign-up

  confirmSignUp:
    handler: src/handler.confirmSignUp
    events:
      - http:
          method: post
          path: /confirm-sign-up

  updatePassword:
    handler: src/handler.updatePassword
    events:
      - http:
          method: put
          path: /updatePassword

  signIn:
    handler: src/handler.signIn
    events:
      - http:
          method: post
          path: /sign-in

  uploadFile:
    handler: src/handler.uploadFile
    events:
      - http:
          method: post
          path: /upload-file

  getFile:
    handler: src/handler.getFile
    events:
      - http:
          method: GET
          path: /getFile

  updateFile:
    handler: src/handler.updateFile
    events:
      - http:
          method: PUT
          path: /updateFile
  
  deleteFile:
    handler: src/handler.deleteFile
    events:
      - http:
          method: DELETE
          path: /deleteFile

  # Category:
  #   handler: src/handler.Category
  #   events:
  #     - http:
  #         method: GET
  #         path: /Category
  # createCategory:
  #   handler: src/handler.createCategory
  #   events:
  #     - http:
  #         method: post
  #         path: /createCategory

  getCategory:
    handler: src/handler.getCategory
    events:
      - http:
          method: GET
          path: /getCategory

  # createTools:
  #   handler: src/handler.createTools
  #   events:
  #     - http:
  #         method: post
  #         path: /createTools

  getTools:
    handler: src/handler.getTools
    events:
      - http:
          method: GET
          path: /getTools

  SearchService:
    handler: src/handler.SearchService
    events:
      - http:
          method: GET
          path: /search-service

resources:
  Resources:
    MyUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: my-user-pool
        AutoVerifiedAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireUppercase: true
            RequireNumbers: true
            RequireSymbols: true

    MyUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId:
          Ref: MyUserPool
        ClientName: my-user-pool-client

    MyUserPoolGroup:
      Type: AWS::Cognito::UserPoolGroup
      Properties:
        GroupName: my-user-pool-group
        UserPoolId:
          Ref: MyUserPool

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: user-table
        AttributeDefinitions:
          - AttributeName: email
            AttributeType: S
        KeySchema:
          - AttributeName: email
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST

    assetsTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
          - AttributeName: "id"
            AttributeType: "S"
        KeySchema:
          - AttributeName: "id"
            KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5
        TableName: "assets-table"

    NewCategoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: new-category-table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    NewToolsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: new-tools-table
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 5
          WriteCapacityUnits: 5

    MyIAMRole:
      Type: AWS::IAM::Role
      Properties:
        RoleName: my-iam-role
        AssumeRolePolicyDocument:
          Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Principal:
                Federated: cognito-identity.amazonaws.com
              Action:
                - sts:AssumeRoleWithWebIdentity
        Policies:
          - PolicyName: my-iam-role-policy
            PolicyDocument:
              Version: "2012-10-17"
              Statement:
                - Effect: Allow
                  Action:
                    - dynamodb:*
                  Resource: "arn:aws:dynamodb:*:*:table/user-table"
